Branch: A pointer to a particular commit, representing an independent line of development in a project

CI/CD: The name for the entire continuous integration and continuous deployment system

Code reviews: The deliberate and methodical gathering of other programmers to examine each other's code for errors to increase the code quality and reduces the amount of bugs

Continuous deployment (CD): New code is deployed often after it has been automatically built and tested

Continuous integration (CI): A system that will automatically build and test our code every time there's a change

Commit: A command to make edits to multiple files and treat that collection of edits as a single change

Commit files: A stage where the changes made to files are safely stored in a snapshot in the Git directory

Commit ID: An identifier next to the word commit in the log

Commit message: A summary and description with contextual information on the parts of the code or configuration of the commit change

Diff: A command to find the differences between two files

Fast-forward merge: A merge when all the commits in the checked out branch are also in the branch that's being merged

Fix up: The decision to discard commit messages for that commit 

Forking: A way of creating a copy of the given repository so that it belongs to our user

Git: A free open source version control system available for installation on Unix based platforms, Windows and macOS

Git directory: A database for a Git project that stores the changes and the change history

Git log: A log that displays commit messages 

Git staging area: A file maintained by Git that contains all the information about what files and changes are going to go into the next commit

Head: This points to the top of the branch that is being used

Indirect merges: GitHub can merge a pull request automatically if the head branch is directly or indirectly merged into the base branch externally

Issue tracker (bug tracker): A tracker that shows tasks that need to be done, the state they're in and who's working on them

Master: The default branch that Git creates for when a new repository initialized, commonly used to place the approved pieces of a project

Merge conflict: This occurs when the changes are made on the same part of the same file, and Git won't know how to merge those changes

Merge commits: All commits from the feature branch are added to the base branch

Modified files: A stage where changes have been made to a file, but the have not been stored or committed 

Patch: A command that can detect that there were changes made to the file and will do its best to apply the changes

Pipelines: The specific steps that need to run to obtain the desired result

Pull request: A procedure where new code is examined before it is merged to create a branch or master branch 

Repository: An organization system of files that contain separate software projects 

Rollback: The act of reverting changes made to software to a previous state 

Source Control Management (SCM): A tool similar to VCS to store source code

Stage files: A stage where the changes to files are ready to be committed 

Squash commits: The decision add commit messages together and an editor opens to make any necessary changes

Tracked: A file’s changes are recorded

Three-way merge: A merge when the snapshots at the two branch tips with the most recent common ancestor, the commit before the divergence

Untracked: A file’s changes are not recorded

Version control systems (VCS): A tool to safely test code before releasing it, allow multiple people collaborate on the same coding projects together, 
and stores the history of that code and configuration










More info :


A Git project will consist of three sections:
*The Git directory :
The Git directory contains the history of all the files and changes.

*The working tree  :
The working tree contains the current state of the project, including any
changes that we've made. 

*The staging area  :
the staging area contains the changes that
have been marked to be included in the next commit. 

When we operate with Git, our files can be either tracked or untracked.Each track file can be in one of three main states, modified, staged or committed :
 *Modified : 
  If a file is in the modified state, it means that we've made changes to it that we haven't added or committed yet. 
 
 *Staged   :
  The next step is to stage those changes.When we do this, our modified files become stage files.
  In other words,the changes to those files are ready to be committed to the project

 *Commited :
  When a file gets committed, the changes made to it are safely stored in a snapshot in the Git directory. 
When committing new files or changes with git commit, the user is asked to provide a commit message. If an empty commit message is entered, the commit will be aborted


You can merge pull requests by retaining the commits. Below is a list of pull request merge options that you can use when merging pull requests.

Merge commits                    : All commits from the feature branch are added to the base branch in a merge commit using the -- no–ff option. 

Squash and merge commits         : Multiple commits of a pull request are squashed, or combined into a single commit, using the fast-forward option.
                                   It is recommended that when merging two branches, pull requests are squashed and merged to prevent the likelihood 
                                   of conflicts due to redundancy.

Merge message for a squash merge : GitHub generates a default commit message, which you can edit. This message may include the pull request title, pull request 
                                   description, or information about the commits.

Rebase and merge commits         : All commits from the topic branch are added onto the base branch individually without a merge commit. 

Indirect merges                  : GitHub can merge a pull request automatically if the head branch is directly or indirectly merged into the base branch externally.
